#!/usr/bin/env python3

from tkinter import *
from tkinter import messagebox
from shutil import which
import tkinter.font as font
from subprocess import call, check_output, CalledProcessError
import re
import os

VPN_SYMBOL = "\uf233"
CONNECT = "\uf1e6"
DISCONNECT = "\uf00d"
APPLY_SYMBOL = "\uf00c"
CANCEL_SYMBOL = "\uf00d"
REFRESH_SYMBOL = "\uf021"

CONNECTED_COLOR='#1FC40D'
DISCONNECTED_COLOR='#DE1212'
CONNECTED_STRING = "<span color=\"" + CONNECTED_COLOR + "\">" + VPN_SYMBOL + " up</span>"
CONNECTED_STRING_LONG = "<span color=\"" + CONNECTED_COLOR + "\">" + VPN_SYMBOL + " up [{}]</span>"
DISCONNECTED_STRING = "<span color=\"" + DISCONNECTED_COLOR + "\">" + VPN_SYMBOL + " down</span>"

strbool = lambda s: s.lower() in ['t', 'true', '1']
def _default(name, default='', arg_type=strbool):
    val = default
    if name in os.environ:
        val = os.environ[name]
    return arg_type(val)


SHOW_ON_OFF = _default("SHOW_ON_OFF","1")
SHOW_NAMES = _default("SHOW_NAMES", "1")
SHOW_PRIMARY = _default("SHOW_PRIMARY", "1")
SHOW_MODE = _default("SHOW_MODE", "1")
SHOW_BLANKED = _default("SHOW_BLANKED", "1")
SHOW_DUPLICATE = _default("SHOW_DUPLICATE", "1")
SHOW_ROTATION = _default("SHOW_ROTATION", "1")
SHOW_UP_DOWN = _default("SHOW_UP_DOWN", "1")

FONTAWESOME_FONT_FAMILY = "FontAwesome"
FONTAWESOME_FONT_SIZE = 10
FONTAWESOME_FONT = (FONTAWESOME_FONT_FAMILY, FONTAWESOME_FONT_SIZE)
DEFAULT_FONT_FAMILY = _default("FONT_FAMILY","DejaVu Sans Mono", str)
DEFAULT_FONT_SIZE = _default("FONT_SIZE", 10, int)
DEFAULT_FONT = (DEFAULT_FONT_FAMILY, DEFAULT_FONT_SIZE)
DEFAULT_FG_COLOR = "white"
DEFAULT_BG_COLOR = "grey10"
CONNECT_FG_COLOR = "green"
DISCONNECT_FG_COLOR = "red1"
CONNECTED_FG_COLOR = "green4"
AVAILABLE_FG_COLOR = "steelblue2"

WINDOW_CLOSE_TO_BOUNDARY_BUFFER = _default("CLOSE_TO_BOUNDARY_BUFFER", 20, int)

class popupWindow(object):
    def __init__(self,master,network):
        top=self.top=Toplevel(master, bg=DEFAULT_BG_COLOR, height='400', width='100')
        top.attributes('-type', 'dialog')
        self.l=Label(top,text="Insert Password for {}".format(network),bg=DEFAULT_BG_COLOR,fg=DEFAULT_FG_COLOR)
        self.l.pack()
        self.e=Entry(top,show="*",bg=DEFAULT_BG_COLOR,fg=DEFAULT_FG_COLOR)
        self.e.pack()
        self.b=Button(top,text='Ok',command=self.cleanup,bg=DEFAULT_BG_COLOR,fg=DEFAULT_FG_COLOR)
        self.b.pack()
    def cleanup(self):
        self.value=self.e.get()
        self.top.destroy()



class Output:
    def __init__(self, w=None, h=None, x=None, y=None, name=None, connected=False, bssid=None, signal=None, rate=None):
        self.w = w
        self.h = h
        self.x = x
        self.y = y
        self.row = None
        self.connected = connected
        self.name = name

    def getWifiList():
        """
        Get the available wifi list using nmcli
        """
        outputs = []
        networksText = check_output(["nmcli", "-t", "-f", "NAME,ACTIVE,TYPE", "connection", "show"], universal_newlines=True)
        networksBlocks = networksText.splitlines()
        infoPattern = re.compile(r'^(.*):(\S*):(\S*)$')

        for networkBlocks in networksBlocks:
            output = Output()
            infoMatch = infoPattern.match(networkBlocks)
            if infoMatch:
                if infoMatch.group(3) != 'vpn':
                    continue
                output.name = infoMatch.group(1)
                if infoMatch.group(2) == 'yes':
                    output.connected = True
                else:
                    output.connected = False
                outputs.append(output)

        return outputs

    def modestr(mode):
        return "{}x{}@{}".format(*mode)

class VPNManager():
    def __init__(self, root):
        self.root = root
        self.root.withdraw()
        self.root.resizable(0,0)
        self.root.wm_title("VPN Manager")
        self.frame = None
        self.outputs = []
        self.hardRefreshList()
        style = {'bg': DEFAULT_BG_COLOR, 'fg':DEFAULT_FG_COLOR, 'relief':FLAT, 'padx':1, 'pady':1, 'anchor':'w', 'font':FONTAWESOME_FONT, 'bd':0}

        self.infoLabel = Label(self.root, text="", **style)
        self.infoLabel.config(bg=DEFAULT_BG_COLOR, font=DEFAULT_FONT)

        self.bottomRow = []

        self.applyButton = Button(self.root, text=APPLY_SYMBOL, **style)
        self.bottomRow.append(self.applyButton)

        self.refreshButton = Button(self.root, text=REFRESH_SYMBOL, **style)
        self.bottomRow.append(self.refreshButton)

        self.cancelButton = Button(self.root, text=CANCEL_SYMBOL, **style)
        self.bottomRow.append(self.cancelButton)

        self.infoLabel.grid(row=1,column=0, columnspan=len(self.bottomRow))
        self.gridRow(2, self.bottomRow)

        self.moveToMouse()
        self.root.deiconify()

    def registerBindings(self):
        self.root.bind("<Return>", self.handleApply)
        self.root.bind("<Escape>", self.handleCancel)

        self.applyButton.bind("<Button-1>", self.handleApply)
        self.setInfo(self.applyButton, "Apply changes")

        self.refreshButton.bind("<Button-1>", self.hardRefreshList)
        self.setInfo(self.refreshButton, "Refresh list")

        self.cancelButton.bind("<Button-1>", self.handleCancel)
        self.setInfo(self.cancelButton, "Cancel")



    def gridRow(self, row, widgets):
        column = 0
        for w in widgets:
            w.configure(bg=DEFAULT_BG_COLOR)
            w.grid(row=row, column=column)
            column += 1

    def moveToMouse(self):
        root = self.root
        root.configure(bg=DEFAULT_BG_COLOR)
        root.update_idletasks()
        width = root.winfo_reqwidth()
        height = root.winfo_reqheight()
        x = root.winfo_pointerx() - width//2
        y = root.winfo_pointery() - height//2
        screen_width = root.winfo_screenwidth()
        screen_height = root.winfo_screenheight()
        if x+width > screen_width - WINDOW_CLOSE_TO_BOUNDARY_BUFFER:
            x =  screen_width - WINDOW_CLOSE_TO_BOUNDARY_BUFFER - width
        elif x < WINDOW_CLOSE_TO_BOUNDARY_BUFFER:
            x = WINDOW_CLOSE_TO_BOUNDARY_BUFFER
        if y+height > screen_height - WINDOW_CLOSE_TO_BOUNDARY_BUFFER:
            y = screen_height - WINDOW_CLOSE_TO_BOUNDARY_BUFFER - height
        elif y < WINDOW_CLOSE_TO_BOUNDARY_BUFFER:
            y = WINDOW_CLOSE_TO_BOUNDARY_BUFFER

        root.geometry('+{}+{}'.format(x, y))

    def setInfo(self, widget, info):
        widget.bind("<Enter>", lambda e: self.infoLabel.config(text=info, fg=DEFAULT_FG_COLOR))
        widget.bind("<Leave>", lambda e: self.infoLabel.config(text=""))

    def handleApply(self, e=None):
        self.root.after_idle(self.doHandleApply)

    def doHandleApply(self):
        self.root.destroy()


    def handleCancel(self, e=None):
        self.root.destroy()


    def connect(self, e):
        conn = e.widget.output
        m=popupWindow(self.root, conn.name)
        self.root.wait_window(m.top)
        if m.value is None or m.value == '':
            return

        os.system('echo vpn.secrets.password:{} | nmcli c up "{}" passwd-file /dev/fd/0'.format(m.value, conn.name))
        self.softRefreshList()

    def disconnect(self, e):
        conn = e.widget.output
        os.system('nmcli con down "{}"'.format(conn.name))
        self.softRefreshList()



    def softRefreshList(self, e=None):
        for widget in self.toggleButtons:
            if widget.output.connected:
                self.setInfo(widget, "Disconnect")
                widget.bind("<Button-1>", self.disconnect)
            else:
                self.setInfo(widget, "Connect")
                widget.bind("<Button-1>", self.connect)
            widget.config(text=" " + DISCONNECT if widget.output.connected else CONNECT)
            widget.config(fg=CONNECT_FG_COLOR if not widget.output.connected else DISCONNECT_FG_COLOR)

        for widget in self.nameLabels:
            widget.config(text=" {}".format(widget.output.name))
            widget.config(fg=AVAILABLE_FG_COLOR if not widget.output.connected else CONNECTED_FG_COLOR)

    def hardRefreshList(self, e=None):
        self.outputs = Output.getWifiList()
        self.root.after_idle(self.populateGrid)

    def populateGrid(self):
        oldFrame = self.frame
        self.frame = Frame(self.root)
        self.frame.configure(bg=DEFAULT_BG_COLOR)
        self.frame.grid(row=0, column=0, columnspan=len(self.bottomRow))
        self.toggleButtons = []
        self.nameLabels = []
        self.primaryButtons = []
        self.statusOptionMenus = []
        for row, output in enumerate(self.outputs):
            self.makeLabelRow(output, row)
        self.registerBindings()
        if oldFrame:
            oldFrame.destroy()

    def makeLabelRow(self, output, row):
        output.row = row
        style = {'bg': DEFAULT_BG_COLOR, 'relief':FLAT, 'padx':1, 'pady':1, 'anchor':'w'}
        widgets = []

        toggleButton = Button(self.frame, font=FONTAWESOME_FONT, **style)
        toggleButton.output = output
        self.toggleButtons.append(toggleButton)
        if SHOW_ON_OFF:
            widgets.append(toggleButton)

        nameLabel = Label(self.frame, font=DEFAULT_FONT)
        nameLabel.output = output
        self.nameLabels.append(nameLabel)
        if SHOW_NAMES:
            widgets.append(nameLabel)

        for widget in widgets:
            widget.output = output
        self.gridRow(row, widgets)
        self.softRefreshList()

    def handleFocusOut(self, event):
        self.root.destroy()

def setLabelAndOutputModeFunc(var, label, output, i):
    def func():
        var.set(label)
        output.setMode(i)
    return func


def getCurrentNetwork():
    connsText = check_output(["nmcli", "-t", "-f", "NAME,ACTIVE,TYPE", "connection", "show", "--active"], universal_newlines=True)
    connBlocks = connsText.splitlines()
    infoPattern = re.compile(r'^(.*):(\S*):(\S*)$')


    for con in connBlocks:
        infoMatch = infoPattern.match(con)
        if infoMatch and infoMatch.group(3) == 'vpn':
            return infoMatch.group(1)
    return None


def printOutput(long=False):
    network = getCurrentNetwork()
    if network is None:
        print(DISCONNECTED_STRING)
    else:
        if long:
            print(CONNECTED_STRING_LONG.format(network))
        else:
            print(CONNECTED_STRING)


if os.environ.get('BLOCK_BUTTON') == "1":
#if True:
    if os.fork() != 0:
        root = Tk()
        root.configure(bg=DEFAULT_BG_COLOR)
        if DEFAULT_FONT_FAMILY and DEFAULT_FONT_SIZE:
            font.nametofont("TkDefaultFont").config(family=DEFAULT_FONT_FAMILY, size=DEFAULT_FONT_SIZE)
        manager = VPNManager(root)
        root.mainloop()
    else:
        printOutput()

elif os.environ.get('BLOCK_BUTTON') == "3":
#elif True:
    printOutput(long=True)

else:
    printOutput()
